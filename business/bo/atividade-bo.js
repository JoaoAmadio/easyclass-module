"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AtividadeBO = void 0;
const typeorm_1 = require("typeorm");
const defaultDAO_1 = require("../core/dao/defaultDAO");
const atividade_1 = require("../../entities/atividade");
const atividadeAlunosUsuario_1 = require("../../entities/atividadeAlunosUsuario");
const disciplinaAlunosUsuario_1 = require("../../entities/disciplinaAlunosUsuario");
const respostaAtividade_1 = require("../../entities/respostaAtividade");
class AtividadeBO extends defaultDAO_1.DefaultDAO {
    constructor() {
        super();
        this.atividadeRepositorio = (0, typeorm_1.getRepository)(atividade_1.default);
    }
    async buscaPorCodigo2(codigoAtividade) {
        return this.atividadeRepositorio.findOne({
            where: { codigoAtividade }
        });
    }
    async buscaPorCodigo(codigoAtividade) {
        return this.atividadeRepositorio.createQueryBuilder("atividade")
            .innerJoinAndSelect("atividade.disciplina", "disciplina")
            .innerJoinAndSelect("atividade.autor", "autor")
            .innerJoinAndSelect("atividade.curso", "curso")
            .leftJoinAndSelect("atividade.alunos", "alunos")
            .leftJoinAndSelect("disciplina.alunos", "disciplina_alunos")
            .leftJoinAndSelect("curso.alunos", "curso_alunos")
            .leftJoinAndSelect("atividade.itensAtividade", "itensAtividade")
            .leftJoinAndSelect("itensAtividade.subitensItemAtividade", "subitensItemAtividade")
            .where("atividade.codigoAtividade = :codigoAtividade", { codigoAtividade }).getOne();
    }
    async listaRespostaAtividadeUsuarioDisciplina(idUsuario, idCurso, idDisciplina) {
        return (0, typeorm_1.getRepository)(respostaAtividade_1.default).createQueryBuilder("respostaAtividade")
            .innerJoinAndSelect("respostaAtividade.atividade", "atividade")
            .innerJoinAndSelect("respostaAtividade.aluno", "aluno")
            .innerJoinAndSelect("atividade.curso", "curso")
            .innerJoinAndSelect("atividade.disciplina", "disciplina")
            .innerJoinAndSelect("atividade.autor", "autor")
            .where("autor.idUsuario = :idUsuario AND curso.idCurso = :idCurso AND disciplina = :idDisciplina", { idUsuario, idCurso, idDisciplina })
            .getMany();
    }
    async listaAtividadeDisciplinaUsuario(idUsuario, idDisciplina) {
        return this.atividadeRepositorio.createQueryBuilder("atividade")
            .innerJoin(atividadeAlunosUsuario_1.default, "au", "au.atividadeIdAtividade = atividade.idAtividade")
            .innerJoin(disciplinaAlunosUsuario_1.default, "du", "du.usuarioIdUsuario = au.usuarioIdUsuario")
            .innerJoinAndSelect("au.usuario", "u")
            .innerJoinAndSelect("atividade.disciplina", "disciplina")
            .innerJoinAndSelect("atividade.autor", "autor")
            .innerJoinAndSelect("atividade.curso", "curso")
            .leftJoinAndSelect("atividade.alunos", "alunos")
            .leftJoinAndSelect("atividade.itensAtividade", "itensAtividade")
            .leftJoinAndSelect("itensAtividade.subitensItemAtividade", "subitensItemAtividade")
            .where("(autor.idUsuario = :idUsuario OR (atividade.disponivel = '1' AND u.idUsuario = :idUsuario)) AND disciplina.idDisciplina = :idDisciplina", { idUsuario, idDisciplina }).getMany();
    }
    async buscaRespostaPorAtividadeEAluno(aluno, atividade) {
        const { ra } = aluno;
        const { idAtividade } = atividade;
        return (0, typeorm_1.getRepository)(respostaAtividade_1.default).createQueryBuilder("respostaAtividade")
            .innerJoinAndSelect("respostaAtividade.atividade", "atividade")
            .innerJoinAndSelect("respostaAtividade.aluno", "aluno")
            .innerJoinAndSelect("atividade.disciplina", "disciplina")
            .innerJoinAndSelect("disciplina.professor", "professor")
            .innerJoinAndSelect("atividade.autor", "autor")
            .innerJoinAndSelect("atividade.curso", "curso")
            .leftJoinAndSelect("respostaAtividade.respostaAtividadeItens", "respostaAtividadeItens")
            .leftJoinAndSelect("respostaAtividadeItens.itemAtividade", "itemAtividade")
            .leftJoinAndSelect("itemAtividade.subitensItemAtividade", "itemAtividade_subitensItemAtividade")
            .leftJoinAndSelect("atividade.alunos", "alunos")
            .leftJoinAndSelect("atividade.itensAtividade", "itensAtividade")
            .leftJoinAndSelect("itensAtividade.subitensItemAtividade", "subitensItemAtividade")
            .where("(aluno.ra = :ra) AND atividade.idAtividade = :idAtividade", { ra, idAtividade }).getOne();
    }
    async buscaRespostaAtividadePorID(idRespostaAtividade) {
        return (0, typeorm_1.getRepository)(respostaAtividade_1.default).createQueryBuilder("respostaAtividade")
            .innerJoinAndSelect("respostaAtividade.atividade", "atividade")
            .innerJoinAndSelect("respostaAtividade.aluno", "aluno")
            .innerJoinAndSelect("atividade.disciplina", "disciplina")
            .innerJoinAndSelect("atividade.autor", "autor")
            .innerJoinAndSelect("atividade.curso", "curso")
            .leftJoinAndSelect("respostaAtividade.respostaAtividadeItens", "respostaAtividadeItens")
            .leftJoinAndSelect("respostaAtividadeItens.itemAtividade", "itemAtividade")
            .leftJoinAndSelect("itemAtividade.subitensItemAtividade", "itemAtividade_subitensItemAtividade")
            .leftJoinAndSelect("atividade.alunos", "alunos")
            .leftJoinAndSelect("atividade.itensAtividade", "itensAtividade")
            .leftJoinAndSelect("itensAtividade.subitensItemAtividade", "subitensItemAtividade")
            .where("respostaAtividade.idRespostaAtividade = :idRespostaAtividade", { idRespostaAtividade }).getOne();
    }
    async listaSimplesAtividadesPorCursoEDisciplina(curso, disciplina, autor) {
        const { idCurso } = curso;
        const { idDisciplina } = disciplina;
        const { idUsuario } = autor;
        return this.atividadeRepositorio.createQueryBuilder("atividade")
            .innerJoinAndSelect("atividade.disciplina", "disciplina")
            .innerJoinAndSelect("atividade.autor", "autor")
            .innerJoinAndSelect("atividade.curso", "curso")
            .where("autor.idUsuario = :idUsuario AND disciplina.idDisciplina = :idDisciplina AND curso.idCurso = :idCurso", { idUsuario, idDisciplina, idCurso })
            .getMany();
    }
}
exports.AtividadeBO = AtividadeBO;
//# sourceMappingURL=data:application/json;base64,